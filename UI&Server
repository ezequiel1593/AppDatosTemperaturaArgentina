library(shiny)
library(rsconnect)
source("funciones_app.R")

# UI
ui <- 
  titlePanel("Datos de temperatura mínima y máxima.") |> 
  fluidPage(
    tabsetPanel(
      tabPanel(title = "Datos",
               mainPanel(
                 fluidRow(
                   selectInput(inputId =  "Anio",
                               label =  "Año",
                               choices = 1906:2023,
                               multiple = FALSE,
                               selected = 2022) |> column(width = 2),
                   selectInput(inputId =  "Mes",
                               label =  "Mes",
                               choices = 1:12,
                               multiple = FALSE) |> column(width = 2),
                   selectInput(inputId =  "Estacion",
                               label =  "Estacion",
                               choices = nombres_estaciones,
                               multiple = FALSE) |> column(width = 6),
                   actionButton(inputId = "Enter",
                                label ="Ingresar",
                                class = "btn-lg btn-success") |> column(width = 2,align= "center",style = "margin-top: 25px;") ), 
                 DT::dataTableOutput(outputId = "table") ) ),
      tabPanel(title = "Medias mensuales",
               mainPanel(
                 fluidRow(
                   selectInput(inputId = "TminTmax",
                               label = "Parámetro",
                               choices = list("Mínimas"="tnm", "Máximas"="txm"),
                               multiple = FALSE) |> column(width = 2),
                   selectInput(inputId = "Estacion2",
                               label = "Estacion",
                               choices = nombres_estaciones,
                               multiple = FALSE) |> column(width = 6),
                   actionButton(inputId = "Enter2",
                                label = "Ingresar",
                                class = "btn-lg btn-success") |> column(width = 2,align = "center",style = "margin-top: 25px;") ), 
                 DT::dataTableOutput(outputId = "table2"), 
                 h2("GRÁFICO"),
                 fluidRow(
                   selectInput(inputId = "MesesGrafMed",
                               label = "Mes",
                               choices = 1:12,
                               multiple = FALSE) |> column(width = 2),
                   actionButton(inputId = "GrafMed",
                                label = "Graficar",
                                class = "btn-lg btn-success") |> column(width = 2,align ="center",style = "margin-top: 25px;") ),
                 plotOutput(outputId = "graph1") ) ),
      tabPanel(title = "Extremos mensuales",
               mainPanel(
                 fluidRow(
                   selectInput(inputId = "TnnTnxTxnTxx",
                               label = "Parámetro",
                               choices = list("Mínimas más bajas"="tnn", "Mínimas más altas"="tnx",
                                              "Máximas más bajas"="txn", "Máximas más altas"="txx")) |> column(width = 3),
                   selectInput(inputId = "Estacion3",
                               label = "Estacion",
                               choices = nombres_estaciones,
                               multiple = FALSE) |> column(width = 6),
                   actionButton(inputId = "Enter3",
                                label = "Ingresar",
                                class = "btn-lg btn-success") |> column(width = 2,align ="center",style = "margin-top: 25px;") ),
                 DT::dataTableOutput(outputId = "table3"),
                 h2("GRÁFICO"),
                 fluidRow(
                   selectInput(inputId = "MesesGrafExt",
                               label = "Mes",
                               choices = 1:12,
                               multiple = FALSE) |> column(width = 2),
                   actionButton(inputId = "GrafExt",
                                label = "Graficar",
                                class = "btn-lg btn-success") |> column(width = 2,align ="center",style = "margin-top: 25px;") ),
                 plotOutput(outputId = "graph2") ) ),
      tabPanel(title = "Umbrales",
               mainPanel(
                 fluidRow(
                   selectInput(inputId = "Mesesumbrales",
                               label = "Mes",
                               choices = 1:12,
                               multiple = FALSE) |> column(width = 2),
                   selectInput(inputId = "Comparacionumbral",
                               label = "Comparación",
                               choices = list("Tmin <="="Tmin <=", "Tmin >=", "Tmax <=", "Tmax >="),
                               multiple = FALSE) |> column(width = 2),
                   numericInput(inputId = "Valorumbral",
                               label = "Umbral",
                               value = 10.0,
                               min = -40.0,
                               max = 48.0,
                               step = 0.1) |> column(width = 2),
                   selectInput(inputId = "Estacion4",
                               label = "Estacion",
                               choices = nombres_estaciones,
                               multiple = FALSE) |> column(width = 6),
                   actionButton(inputId = "Enter4",
                                label = "Ingresar",
                                class = "btn-lg btn-success") |> column(width = 2,align ="center",style = "margin-top: 25px;") ),
                 DT::dataTableOutput(outputId = "table4") ) ),
      tabPanel(title = "Récords",
               mainPanel(
                 fluidRow(
                   selectInput(inputId =  "Estacion5",
                               label =  "Estación",
                               choices = nombres_estaciones,
                               multiple = FALSE) |> column(width = 6),
                   actionButton(inputId = "Enter5",
                                label ="Ingresar",
                                class = "btn-lg btn-success") |> column(width = 2,align= "center",style = "margin-top: 25px;") ), 
                 DT::dataTableOutput(outputId = "table5") ) ),
      tabPanel(title = "Percentiles",
               mainPanel(
                 fluidRow(
                   selectInput(inputId =  "Estacion6",
                               label =  "Estación",
                               choices = nombres_estaciones,
                               multiple = FALSE) |> column(width = 5),
                   selectInput(inputId = "PeriodoPercentil",
                               label = "Periodo",
                               choices = list("1911-1940" = 1, "1921-1950" = 2, "1931-1960" = 3, "1941-1970" = 4,
                                              "1951-1980" = 5, "1961-1990" = 6, "1971-2000" = 7, "1981-2010" = 8,
                                              "1991-2020" = 9),
                               multiple = FALSE) |> column(width = 3),
                   selectInput(inputId = "ParametroPercentil",
                               label = "Parámetro",
                               choices = list("Temp. mínima" = "Tmin", "Temp. máxima" = "Tmax"),
                               multiple = FALSE) |> column(width = 2),
                   actionButton(inputId = "Enter6",
                                label ="Ingresar",
                                class = "btn-lg btn-success") |> column(width = 2,align= "center",style = "margin-top: 25px;") ), 
                 DT::dataTableOutput(outputId = "table6") ) ),
      type="tabs")
    )

# SERVER
server <- function(input, output) {
  #PANEL DATOS
  data_choice <- reactiveVal()
  observeEvent(eventExpr = input$Enter,
               {pos_vector_nombres <- match(input$Estacion,nombres_estaciones)
               data_choice(transformacion(listado_archivos[[pos_vector_nombres]],input$Anio,input$Mes))
               })
  output$table <- DT::renderDataTable({data_choice()})
  
  #PANEL MEDIAS MENSUALES
  ParamPanel2 <- reactiveValues(value_store = character() )
  data_choice2 <- reactiveVal() #Tabla
  data_choice3 <- reactiveVal() #Gráfico
  observeEvent(eventExpr = input$Enter2,
               {pos_vector_nombres2 <- match(input$Estacion2,nombres_estaciones)
               ParamPanel2$value_store <- input$TminTmax
               data_choice2( listado_archivos[[pos_vector_nombres2]] |> tabla_mensual(ParamPanel2$value_store) )
               })
  observeEvent(eventExpr = input$GrafMed,
               {pos_vector_nombres2 <- match(input$Estacion2,nombres_estaciones)
               ParamPanel2$value_store <- input$TminTmax
               data_choice3( listado_archivos[[pos_vector_nombres2]] |> graficarTemp(ParamPanel2$value_store,
                                                                                     as.numeric(input$MesesGrafMed)) )
               })
  output$table2 <- DT::renderDataTable({data_choice2()})
  output$graph1 <- renderPlot({data_choice3()})
  
  #PANEL EXTREMOS MENSUALES
  ParamPanel3 <- reactiveValues(value_store = character() )
  data_choice4 <- reactiveVal() #Tabla
  data_choice5 <- reactiveVal() #Gráfico
  observeEvent(eventExpr = input$Enter3,
               {pos_vector_nombres3 <- match(input$Estacion3,nombres_estaciones)
               ParamPanel3$value_store <- input$TnnTnxTxnTxx
               data_choice4( listado_archivos[[pos_vector_nombres3]] |> tabla_mensual(ParamPanel3$value_store))
               })
  
  observeEvent(eventExpr = input$GrafExt,
               {pos_vector_nombres3 <- match(input$Estacion3,nombres_estaciones)
               ParamPanel3$value_store <- input$TnnTnxTxnTxx
               data_choice5( listado_archivos[[pos_vector_nombres3]] |> graficarTemp(ParamPanel3$value_store,
                                                                                     as.numeric(input$MesesGrafExt)) )
               })
  output$table3 <- DT::renderDataTable({data_choice4()})
  output$graph2 <- renderPlot({data_choice5()})
  
  #PANEL UMBRALES
  ParamPanel4 <- reactiveValues(value_store = character() )
  data_choice6 <- reactiveVal()
  
  observeEvent(eventExpr = input$Enter4,
               {pos_vector_nombres4 <- match(input$Estacion4,nombres_estaciones)
               ParamPanel4$value_store <- input$Comparacionumbral
               data_choice6( listado_archivos[[pos_vector_nombres4]] |> umbrales(ParamPanel4$value_store,
                                                                                 as.numeric(input$Valorumbral),
                                                                                 as.numeric(input$Mesesumbrales)) )
               })
  output$table4 <- DT::renderDataTable({data_choice6()})
  
  #PANEL RECORDS
  data_choice7 <- reactiveVal()
  observeEvent(eventExpr = input$Enter5,
               {pos_vector_nombres5 <- match(input$Estacion5,nombres_estaciones)
               data_choice7(records(listado_archivos[[pos_vector_nombres5]]))
               })
  output$table5 <- DT::renderDataTable({data_choice7()})
  
  #PANEL PERCENTILES
  ParamPanelPercentiles <- reactiveValues(value_store = character() )
  data_choice8 <- reactiveVal()
  observeEvent(eventExpr = input$Enter6,
               {pos_vector_nombres6 <- match(input$Estacion6,nombres_estaciones)
               ParamPanelPercentiles$value_store <- input$ParametroPercentil
               data_choice8( listado_archivos[[pos_vector_nombres6]] |> percentiles(as.numeric(input$PeriodoPercentil),
                                                                                    ParamPanelPercentiles$value_store) )
               })
  output$table6 <- DT::renderDataTable({data_choice8()})
  
  #PANEL VALORES NORMALES
  
  #PANEL MAPAS DIARIOS
  
  }
# CORRER LA APLICACIÓN
shinyApp(ui = ui, server = server)
