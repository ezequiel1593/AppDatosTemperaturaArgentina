library(here)
library(DT)
library(ggplot2)
library(dplyr)
library(lubridate)

rm(list=ls())

listado_archivos <- list.files(here("Data"),pattern="*.txt") #116 estaciones
substrRight <- function(x) {substr(x, 1, nchar(x)-4)} #Decia -23
nombres_estaciones <- substrRight(listado_archivos)

transformacion <- function(archivo,anio,mes){
  datos <- read.table(here("Data",archivo),
                      col.names = c("A","M","D","Tmax","Tmin"),
                      na.strings = "")
  
  datos$A <- as.numeric(datos$A)
  datos$M <- as.numeric(datos$M)
  datos$D <- as.numeric(datos$D)
  datos$Tmax <- as.numeric(datos$Tmax)
  datos$Tmin <- as.numeric(datos$Tmin)
  datos <- subset(datos, A==anio & M==mes)
  
  mytabl <- datatable(datos,
                      rownames = FALSE,
                      class = 'cell-border stripe',
                      #filter = 'top',
                      #container= 'sketch',
                      extensions = 'Buttons',
                      options = list (pageLength = 50,
                                      width= '20%',
                                      scrollX = TRUE,
                                      scrolly = TRUE,
                                      autoWidth = FALSE,
                                      #columnDefs = list(list(width = '4px', targets = c(1,2,3,4))),,
                                      dom = 'rtB',
                                      buttons =
                                        list('copy', 'print', list(
                                          extend = 'collection',
                                          buttons = c('csv', 'excel', 'pdf'),
                                          text = 'Descargar' ))
                      )
  )
  
  mytabl <- mytabl %>% formatRound("Tmax", 1)
  mytabl <- mytabl %>% formatRound("Tmin", 1)
  
  return(mytabl)
}

mediaMensualNA <- function(x) {
  cantidadNA <- sum(is.na(x))
  if (cantidadNA >5) {resultado <- NA
  } else {resultado <- mean(x, na.rm=TRUE)}
  return(resultado)
}

minimaMensualNA <- function(x) {
  cantidadNA <- sum(is.na(x))
  if (cantidadNA >5) {resultado <- NA
  } else {resultado <- min(x, na.rm=TRUE)}
  return(resultado)
}

maximaMensualNA <- function(x) {
  cantidadNA <- sum(is.na(x))
  if (cantidadNA >5) {resultado <- NA
  } else {resultado <- max(x, na.rm=TRUE)}
  return(resultado)
}

tabla_mensual <- function(archivo, parametro) {
  datos <- read.table(here("Data",archivo),
                      col.names = c("A","M","D","Tmax","Tmin"),
                      na.strings = "")
  
  datos$Tmax <- as.numeric(datos$Tmax)
  datos$Tmin <- as.numeric(datos$Tmin)
  
  if (parametro == "tnm") {
    tablaProv <- aggregate(x = datos, by=list(datos$A,datos$M), mediaMensualNA)
    tablaProv$Tmin <- round(tablaProv$Tmin,digits=1)
    tabla <- as.data.frame.matrix(xtabs(Tmin~Group.1+Group.2,tablaProv,addNA = TRUE))
  } else if (parametro == "txm") {
    tablaProv <- aggregate(x = datos, by=list(datos$A,datos$M), mediaMensualNA)
    tablaProv$Tmax <- round(tablaProv$Tmax,digits=1)
    tabla <- as.data.frame.matrix(xtabs(Tmax~Group.1+Group.2,tablaProv,addNA = TRUE))
  } else if (parametro == "tnn") {
    tablaProv <- aggregate(x = datos, by=list(datos$A,datos$M), minimaMensualNA)
    tablaProv$Tmin <- round(tablaProv$Tmin,digits=1)
    tabla <- as.data.frame.matrix(xtabs(Tmin~Group.1+Group.2,tablaProv,addNA = TRUE))
  } else if (parametro == "tnx") {
    tablaProv <- aggregate(x = datos, by=list(datos$A,datos$M), maximaMensualNA)
    tablaProv$Tmin <- round(tablaProv$Tmin,digits=1)
    tabla <- as.data.frame.matrix(xtabs(Tmin~Group.1+Group.2,tablaProv,addNA = TRUE))
  } else if (parametro == "txn") {
    tablaProv <- aggregate(x = datos, by=list(datos$A,datos$M), minimaMensualNA)
    tablaProv$Tmax <- round(tablaProv$Tmax,digits=1)
    tabla <- as.data.frame.matrix(xtabs(Tmax~Group.1+Group.2,tablaProv,addNA = TRUE))
  } else if (parametro == "txx") {
    tablaProv <- aggregate(x = datos, by=list(datos$A,datos$M), maximaMensualNA)
    tablaProv$Tmax <- round(tablaProv$Tmax,digits=1)
    tabla <- as.data.frame.matrix(xtabs(Tmax~Group.1+Group.2,tablaProv,addNA = TRUE))
  }
  
  mytabl <- datatable(tabla,
                      class = 'cell-border stripe',
                      extensions = 'Buttons',
                      options = list (pageLength = 130,
                                      width= '50%',
                                      scrolly = TRUE,
                                      autoWidth = FALSE,
                                      dom = 'rtB',
                                      buttons = list(list(extend = 'copy', text = "Copiar tabla"),
                                                     list(extend = 'print', text = "Imprimir tabla"), 
                                                     list(extend = 'collection', buttons = c('csv', 'excel', 'pdf'),text = 'Descargar')
                                                     )
                      )
  )
  #CORREGIR ESTO DE LOS COLORES!!
  colRamp <- colorRamp(c("#62be7a","#ffeb84","#f8696b"))
  
  for(column in names(tabla)){
    x <- na.omit(tabla[[column]])
    brks <- quantile(x,
                     probs = seq(.05, .95, .01))
    RGB <- colRamp(c(0, (brks-min(x))/(max(x)-min(x))))
    clrs <- apply(RGB, 
                  1, 
                  function(rgb){ sprintf("rgb(%s)", toString(round(rgb,0))) })
    mytabl <- mytabl %>% 
      formatStyle(column, 
                  backgroundColor = styleInterval(brks, clrs))
  }
  return(mytabl)
}

graficarTemp <- function(archivo, parametro,mes) {
  datos <- tabla_mensual(archivo, parametro)$x$data
  anios <- datos$` `
  temperaturas <- datos[,mes+1]
  DF_datos <- data.frame("anios"= anios, "temp"=temperaturas)
  graf <- ggplot(data = DF_datos)
  graf <- graf + geom_line(mapping = aes(x=anios,y=temp, group=1))
  graf <- graf + scale_x_discrete(breaks = seq(min(anios), max(anios),5))
  
  return(graf)
}

umbrales <- function(archivo, comparacion, umbral, mes) {
  datos <- read.table(here("Data",archivo),
                      col.names = c("A","M","D","Tmax","Tmin"),
                      na.strings = "")
  
  datos$M <- as.numeric(datos$M)
  datos$Tmax <- as.numeric(datos$Tmax)
  datos$Tmin <- as.numeric(datos$Tmin)
  
  datos_del_mes <- subset(datos, M == mes)
  
  if (comparacion == "Tmin <=") {
    tabla <- subset(datos_del_mes, Tmin <= umbral)
    } else if (comparacion == "Tmin >=") {
      tabla <- subset(datos_del_mes, Tmin >= umbral)
      } else if (comparacion == "Tmax <=") {
        tabla <- subset(datos_del_mes, Tmax <= umbral)
        } else if (comparacion == "Tmax >=") {
          tabla <- subset(datos_del_mes, Tmax >= umbral)
        }
  
  mytabl <- datatable(tabla,
                      rownames = FALSE,
                      class = 'cell-border stripe',
                      extensions = 'Buttons',
                      options = list (pageLength = 50,
                                      width= '20%',
                                      scrollX = TRUE,
                                      scrolly = TRUE,
                                      autoWidth = FALSE,
                                      dom = 'rtB',
                                      buttons =
                                        list('copy', 'print', list(
                                          extend = 'collection',
                                          buttons = c('csv', 'excel', 'pdf'),
                                          text = 'Descargar' ))
                                      )
                      )
  return(mytabl)
  }

records <- function(archivo){
  datos <- read.table(here("Data",archivo),
                      col.names = c("A","M","D","Tmax","Tmin"),
                      na.strings = "")
  
  datos$Tmax <- as.numeric(datos$Tmax)
  datos$Tmin <- as.numeric(datos$Tmin)
  datos <- datos |> mutate(Fecha = make_datetime(A, M, D))
  
  records_minimos <- aggregate(datos,by=list(datos$M), function(x) min(x,na.rm = TRUE))
  fechas_tnn <- numeric(0)
  fechas_txn <- numeric(0)
  records_maximos <- aggregate(datos,by=list(datos$M), function(x) max(x,na.rm = TRUE))
  fechas_tnx <- numeric(0)
  fechas_txx <- numeric(0)
  
  for (mes in 1:12) {
    subdatos <- subset(datos, M == mes)
    posicion_fecha_tnn <- which(subdatos$Tmin == records_minimos$Tmin[mes])
    fechas_tnn[mes] <- as.character(paste(subdatos$Fecha[posicion_fecha_tnn], collapse = ","))
    
    posicion_fecha_txn <- which(subdatos$Tmax == records_minimos$Tmax[mes])
    fechas_txn[mes] <- as.character(paste(subdatos$Fecha[posicion_fecha_txn], collapse = ","))
    
    posicion_fecha_tnx <- which(subdatos$Tmin == records_maximos$Tmin[mes])
    fechas_tnx[mes] <- as.character(paste(subdatos$Fecha[posicion_fecha_tnx], collapse = ","))
    
    posicion_fecha_txx <- which(subdatos$Tmax == records_maximos$Tmax[mes])
    fechas_txx[mes] <- as.character(paste(subdatos$Fecha[posicion_fecha_txx], collapse = ","))
  }
  
  tabla <- data.frame("Mes"= 1:12,
                      "Tnn"= records_minimos$Tmin,
                      "Fecha_Tnn"= fechas_tnn,
                      "Tnx"= records_maximos$Tmin,
                      "Fecha_Tnx"= fechas_tnx,
                      "Txn"= records_minimos$Tmax,
                      "Fecha_Txn"= fechas_txn,
                      "Txx"= records_maximos$Tmax,
                      "Fecha_Txx"= fechas_txx)
  mytabl <- datatable(tabla,
                      rownames = FALSE,
                      class = 'cell-border stripe',
                      extensions = 'Buttons',
                      options = list (pageLength = 50,
                                      width= '20%',
                                      scrollX = TRUE,
                                      scrolly = TRUE,
                                      autoWidth = FALSE,
                                      dom = 'rtB',
                                      buttons =
                                        list('copy', 'print', list(
                                          extend = 'collection',
                                          buttons = c('csv', 'excel', 'pdf'),
                                          text = 'Descargar' ))
                                      )
                      )
  return(mytabl)
}

percentiles <- function(archivo, periodo, Tmin_Tmax){
  
  año_inicio <- switch(periodo,1911,1921,1931,1941,1951,1961,1971,1981,1991)
  año_final <- switch(periodo,1940,1950,1960,1970,1980,1990,2000,2010,2020)
  
  datos <- read.table(here("Data",archivo),
                      col.names = c("A","M","D","Tmax","Tmin"),
                      na.strings = "")
  
  datos$Tmax <- as.numeric(datos$Tmax)
  datos$Tmin <- as.numeric(datos$Tmin)
  
  subdatos <- subset(datos, (A >= año_inicio) & (A <= año_final))
  
  valores_percentiles <- seq(0.05,0.95,by=0.05)
  cantidad_total_dias_teorica <- c(930,848,930,900,930,900,930,930,900,930,900,930)
  cantidad_total_dias_efectiva <- aggregate(subdatos, by=list(subdatos$M), function(x) sum(!is.na(x)))
  
  if (Tmin_Tmax == "Tmin") {
    porcentaje_efectivo_Tmin <- (cantidad_total_dias_efectiva$Tmin/cantidad_total_dias_teorica)*100
    tabla <- data.frame("Mes"=1:12)
    contador <- 2
    for (percentil in valores_percentiles) {
      datos_por_percentil <- aggregate(subdatos, by=list(subdatos$M), function(x) quantile(x, percentil, na.rm=TRUE))
      tabla[,contador] <- round(datos_por_percentil$Tmin, digits=1)
      contador <- contador + 1 }
    
    for (mes in 1:12) {
      if (porcentaje_efectivo_Tmin[mes] < 85) {tabla[mes,] <- c(mes, rep(NA,19))}
    }
    colnames(tabla) <- c("Mes",valores_percentiles)
  }
  
  if (Tmin_Tmax == "Tmax") {
    porcentaje_efectivo_Tmax <- (cantidad_total_dias_efectiva$Tmax/cantidad_total_dias_teorica)*100
    tabla <- data.frame("Mes"=1:12)
    contador <- 2
    for (percentil in valores_percentiles) {
      datos_por_percentil <- aggregate(subdatos, by=list(subdatos$M), function(x) quantile(x, percentil, na.rm=TRUE))
      tabla[,contador] <- round(datos_por_percentil$Tmax, digits=1)
      contador <- contador + 1 }
    
    for (mes in 1:12) {
      if (porcentaje_efectivo_Tmax[mes] < 85) {tabla[mes,] <- c(mes, rep(NA,19))}
    }
    colnames(tabla) <- c("Mes",valores_percentiles)
  }
  mytabl <- datatable(tabla,
                      rownames = FALSE,
                      class = 'cell-border stripe',
                      extensions = 'Buttons',
                      options = list (pageLength = 50,
                                      width= '20%',
                                      scrollX = TRUE,
                                      scrolly = TRUE,
                                      autoWidth = FALSE,
                                      dom = 'rtB',
                                      buttons =
                                        list('copy', 'print', list(
                                          extend = 'collection',
                                          buttons = c('csv', 'excel', 'pdf'),
                                          text = 'Descargar' ))
                                      )
                      )
  for (s in valores_percentiles){
    mytabl <- mytabl %>% formatRound(as.character(s), 1)
  }
  return(mytabl)
  }
